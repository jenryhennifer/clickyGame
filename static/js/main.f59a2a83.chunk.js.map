{"version":3,"sources":["components/characterCard/index.js","components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Wrapper/index.js","App.js","reportWebVitals.js","index.js"],"names":["characterCard","props","onClick","clickCharacter","id","className","alt","name","src","image","Navbar","score","highScore","Jumbotron","Wrapper","children","App","state","characters","console","log","find","char","clicked","map","current","setState","characters1","concat","sort","Math","random","this","character","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4nCAceA,MAXf,SAAuBC,GACnB,OACA,qBAAKC,QAAS,kBAAMD,EAAME,eAAeF,EAAMG,KAAKC,UAAU,gBAA9D,SACI,qBAAKA,UAAU,qBAAqBD,GAAIH,EAAMG,GAA9C,SACE,qBAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,a,MCQ5BC,MAZf,SAAgBT,GACd,OACE,qBAAKI,UAAU,gDAAf,SACE,qBAAKA,UAAU,2BAA2BD,GAAG,YAA7C,SACE,oBAAIC,UAAU,4BAAd,SACE,qBAAIA,UAAU,QAAd,sBAAgCJ,EAAMU,MAAtC,mBAA6DV,EAAMW,oB,MCS9DC,MAdf,WACE,OACE,qBAAKR,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,mBAAGA,UAAU,OAAb,mH,aCDOS,MAJf,SAAiBb,GACb,OAAO,qBAAKI,UAAY,UAAjB,SAA4BJ,EAAMc,YC8E9BC,E,4MA1EbC,MAAQ,CACNC,WAAYA,EACZP,MAAO,EACPC,UAAW,G,EAIbT,eAAiB,SAACC,GAChBe,QAAQC,IAAIF,GAeZ,IAA2B,IAdR,EAAKD,MAAMC,WAAWG,MAAK,SAACC,GAAD,OAAUA,EAAKlB,KAAOA,KAcrDmB,QAMb,OALWL,EAPNM,KAAI,SAACC,GAAD,mBAAC,eACLA,GADI,IAEPF,SAAS,OAMX,EAAKG,SAAS,CAAEf,MAAO,SACnB,EAAKM,MAAMN,MAAQ,EAAKM,MAAML,WAChC,EAAKc,SAAS,CAAEd,UAAW,EAAKK,MAAMN,SAIxC,IArByBW,EAqBrBK,EAAc,EAAKV,MAAMC,WAAWM,KAAI,SAACF,GAC3C,OAAIA,EAAKlB,KAAOA,EACP,2BAEFkB,GAFL,IAGEC,SAAS,IAGND,KAET,EAAKI,SAAS,CACZR,YAhCuBI,EAgCOK,EA7BnBL,EAAKM,SACNC,MAAK,kBAAMC,KAAKC,SAAW,OA6BrCpB,MAAO,EAAKM,MAAMN,MAAQ,IAE5BQ,QAAQC,IAAI,EAAKH,MAAMN,Q,uDAKjB,IAAD,OAEP,OADAQ,QAAQC,IAAI,UAEV,eAAC,EAAD,WACE,cAAC,EAAD,CAAQT,MAAOqB,KAAKf,MAAMN,MAAOC,UAAWoB,KAAKf,MAAML,YACvD,cAAC,EAAD,IACCoB,KAAKf,MAAMC,WAAWM,KAAI,SAACS,GAAD,OACzB,cAAC,EAAD,CACE7B,GAAI6B,EAAU7B,GAEdG,KAAM0B,EAAU1B,KAChBE,MAAOwB,EAAUxB,MACjBc,QAASU,EAAUV,QACnBpB,eAAgB,EAAKA,gBAJhB8B,EAAU7B,OAOnB,uBAAOC,UAAU,gBAAjB,SACE,wBAAQG,IAAI,uC,GApEJ0B,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f59a2a83.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction characterCard(props){\n    return(\n    <div onClick={() => props.clickCharacter(props.id)} className=\"card col-6-md\">\n        <div className=\"img-thumbnail w-25\" id={props.id}>\n          <img alt={props.name} src={props.image}/>\n        </div>\n    </div>\n    )\n\n}\n\nexport default characterCard","import React from 'react';\nimport './style.css';\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul className=\"navbar-nav nav-fill w-100\">\n          <li className=\"score\">Correct: {props.score} || High Score: {props.highScore}</li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './style.css';\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">King of the Click</h1>\n        <p className=\"lead\">\n          Getting to know the residents of Heimclick county, Texas! Make sure\n          you only talk to them once!\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from 'react';\nimport './style.css';\n\nfunction Wrapper(props){\n    return <div className = 'wrapper'>{props.children}</div>\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport CharacterCard from './components/characterCard';\nimport Navbar from './components/Navbar/Navbar';\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport characters from './characters.json';\nimport Wrapper from './components/Wrapper';\n\nclass App extends Component {\n  state = {\n    characters: characters,\n    score: 0,\n    highScore: 0,\n  };\n\n  //handle if a character is clicked\n  clickCharacter = (id) => {\n    console.log(characters);\n    const clickCheck = this.state.characters.find((char) => char.id === id);\n    const shuffleCharacters = (char) => {\n      //shallow copy of the array\n      //you do not ever want to modify the state directly\n      const copy = char.concat();\n      return copy.sort(() => Math.random() - 0.5);\n    };\n    const resetClick = (list) =>\n      list.map((current) => ({\n        ...current,\n        clicked: false,\n      }));\n\n    //checks if current click has been clicked before then returns them all to false\n    if (clickCheck.clicked === true) {\n      resetClick(characters);\n      this.setState({ score: 0 });\n      if (this.state.score > this.state.highScore) {\n        this.setState({ highScore: this.state.score });\n      }\n      return;\n    } else {\n      let characters1 = this.state.characters.map((char) => {\n        if (char.id === id) {\n          return {\n            //if this is the id you are looking for set click to true\n            ...char,\n            clicked: true,\n          };\n        }\n        return char;\n      });\n      this.setState({\n        characters: shuffleCharacters(characters1),\n        score: this.state.score + 1,\n      });\n      console.log(this.state.score);\n    }\n  };\n\n  //need a state statement that checks all indexes in array and ensure that all are\n  render() {\n    console.log('render');\n    return (\n      <Wrapper>\n        <Navbar score={this.state.score} highScore={this.state.highScore} />\n        <Jumbotron />\n        {this.state.characters.map((character) => (\n          <CharacterCard\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            clicked={character.clicked}\n            clickCharacter={this.clickCharacter}\n          />\n        ))}\n        <audio className=\"audio-element\">\n          <source src=\"./media/KingOfTheHill.mp3\"></source>\n        </audio>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}